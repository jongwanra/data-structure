{\rtf1\ansi\ansicpg949\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;\f2\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;\red108\green121\blue135;\red24\green24\blue28;\red255\green255\blue255;
\red253\green143\blue63;\red252\green70\blue81;\red242\green36\blue140;\red53\green176\blue216;\red255\green231\blue109;
}
{\*\expandedcolortbl;;\csgenericrgb\c42353\c47451\c52941;\csgenericrgb\c9472\c9472\c11000;\csgenericrgb\c100000\c100000\c100000;
\csgenericrgb\c99216\c56078\c24706;\csgenericrgb\c98824\c27451\c31765;\csgenericrgb\c94752\c13993\c54713;\csgenericrgb\c20784\c69020\c84706;\csgenericrgb\c100000\c90556\c42780;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab939
\pard\tx939\pardeftab939\pardirnatural\partightenfactor0

\f0\fs38 \cf2 \cb3 /*\cf4 \
\cf2  N
\f1 \'b0\'b3
\f0 (2 \uc0\u8804  N \u8804  100)
\f1 \'c0\'c7
\f0  
\f1 \'c1\'a4\'bc\'f6\'b7\'ce
\f0  
\f1 \'c0\'cc\'b7\'e7\'be\'ee\'c1\'f8
\f0  
\f1 \'bc\'f6\'bf\'ad
\f0  X
\f1 \'b8\'a6
\f0  \'93
\f1 \'c0\'a7\'c4\'a1
\f0  
\f1 \'b9\'d9\'b2\'de
\f0  
\f1 \'c1\'a4\'ba\'b8
\f0 \'94
\f1 \'bf\'a1
\f0  
\f1 \'c0\'c7\'c7\'d8
\f0  
\f1 \'ba\'af\'c8\'af\'c7\'d1
\f0  
\f1 \'c3\'d6\'c1\'be
\f0  
\f1 \'b0\'e1\'b0\'fa\'b8\'a6
\f0 \cf4 \
\cf2  
\f1 \'c3\'e2\'b7\'c2\'c7\'cf\'b4\'c2\'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a5\'c0\'bb\'c0\'db\'bc\'ba\'c7\'cf\'bd\'c3\'bf\'c0
\f0 . 
\f1 \'c0\'a7\'c4\'a1
\f0  
\f1 \'b9\'d9\'b2\'de
\f0  
\f1 \'b9\'e6\'bd\'c4\'c0\'ba
\f0  
\f1 \'b4\'d9\'c0\'bd\'b0\'fa
\f0  
\f1 \'b0\'b0\'b4\'d9
\f0 . 
\f1 \'bf\'b9\'b8\'a6
\f0  
\f1 \'b5\'e9\'be\'ee
\f0 , 10
\f1 \'b0\'b3
\f0  
\f1 \'c1\'a4\'bc\'f6\'c0\'c7
\f0  
\f1 \'bc\'f6\'bf\'ad
\f0  X
\f1 \'bf\'cd
\f0  
\f1 \'c0\'a7\'c4\'a1
\f0  
\f1 \'b9\'d9\'b2\'de
\f0  
\f1 \'c1\'a4\'ba\'b8\'b0\'a1
\f0 \cf4 \
\cf2  
\f1 \'b4\'d9\'c0\'bd\'b0\'fa
\f0  
\f1 \'b0\'b0\'c0\'cc
\f0  
\f1 \'c1\'d6\'be\'ee\'c1\'b3\'c0\'bb\'b6\'a7
\f0 ,\cf4 \
\cf2  \cf4 \
\cf2  \uc0\u9702  
\f1 \'c0\'a7\'c4\'a1
\f0  
\f1 \'b9\'d9\'b2\'de
\f0  
\f1 \'c1\'a4\'ba\'b8
\f0 :   3 --> 8 --> 0 --> 9 --> 3(
\f1 \'c0\'a7\'c4\'a1
\f0  
\f1 \'b9\'d9\'b2\'de
\f0  
\f1 \'c1\'a4\'ba\'b8\'b8\'a6
\f0  
\f1 \'b1\'b8\'bc\'ba\'c7\'cf\'b4\'c2
\f0  
\f1 \'bc\'f6\'c0\'c7
\f0  
\f1 \'b9\'fc\'c0\'a7\'b4\'c2
\f0  0 ~ N \'96 1 
\f1 \'c0\'cc\'b4\'d9
\f0 . 
\f1 \'c1\'d6\'be\'ee\'c1\'f6\'b4\'c2
\f0  
\f1 \'c0\'a7\'c4\'a1
\f0  
\f1 \'b9\'d9\'b2\'de
\f0  
\f1 \'c1\'a4\'ba\'b8\'bf\'a1\'bc\'ad
\f0  
\f1 \'c3\'b3\'c0\'bd\'b0\'fa
\f0  
\f1 \'b8\'b6\'c1\'f6\'b8\'b7
\f0  
\f1 \'c0\'a7\'c4\'a1\'b4\'c2
\f0  
\f1 \'c7\'d7\'bb\'f3
\f0  
\f1 \'b5\'bf\'c0\'cf\'c7\'cf\'b0\'ed
\f0 , 
\f1 \'b1\'d7
\f0  
\f1 \'bf\'dc\'bf\'a1\'b4\'c2
\f0  
\f1 \'b5\'bf\'c0\'cf\'c7\'d1
\f0  
\f1 \'c0\'a7\'c4\'a1\'b4\'c2
\f0  
\f1 \'be\'f8\'b4\'d9\'b0\'ed
\f0  
\f1 \'b0\'a1\'c1\'a4\'c7\'cf\'b6\'f3
\f0 )\cf4 \
\cf2  \cf4 \
\cf2  \uc0\u9702  
\f1 \'c0\'a7
\f0  
\f1 \'bc\'f8\'bc\'ad
\f0  
\f1 \'b9\'d9\'b2\'de
\f0  
\f1 \'c1\'a4\'ba\'b8\'bf\'a1
\f0  
\f1 \'c0\'c7\'c7\'d8
\f0 , 
\f1 \'bc\'f6\'bf\'ad
\f0  X
\f1 \'bf\'a1\'bc\'ad
\f0 \cf4 \
\cf2  3
\f1 \'b9\'f8
\f0  
\f1 \'c0\'a7\'c4\'a1\'c0\'c7
\f0  
\f1 \'c1\'a4\'bc\'f6
\f0  \'9112\'92
\f1 \'b4\'c2
\f0  8
\f1 \'b9\'f8
\f0  
\f1 \'c0\'a7\'c4\'a1\'b7\'ce
\f0  
\f1 \'c0\'cc\'b5\'bf
\f0 ,\cf4 \
\cf2  8
\f1 \'b9\'f8
\f0  
\f1 \'c0\'a7\'c4\'a1\'c0\'c7
\f0  
\f1 \'c1\'a4\'bc\'f6
\f0  \'9191\'92
\f1 \'c0\'ba
\f0  0
\f1 \'b9\'f8
\f0  
\f1 \'c0\'a7\'c4\'a1\'b7\'ce
\f0  
\f1 \'c0\'cc\'b5\'bf
\f0 ,\cf4 \
\cf2  0
\f1 \'b9\'f8
\f0  
\f1 \'c0\'a7\'c4\'a1\'c0\'c7
\f0  
\f1 \'c1\'a4\'bc\'f6
\f0  \'913\'92
\f1 \'c0\'ba
\f0  9
\f1 \'b9\'f8
\f0  
\f1 \'c0\'a7\'c4\'a1\'b7\'ce
\f0  
\f1 \'c0\'cc\'b5\'bf
\f0 ,\cf4 \
\cf2  9
\f1 \'b9\'f8
\f0  
\f1 \'c0\'a7\'c4\'a1\'c0\'c7
\f0  
\f1 \'c1\'a4\'bc\'f6
\f0  \'9110'
\f1 \'c0\'ba
\f0  3
\f1 \'b9\'f8
\f0  
\f1 \'c0\'a7\'c4\'a1\'b7\'ce
\f0  
\f1 \'c0\'cc\'b5\'bf\'bd\'c3\'c5\'b2\'b4\'d9
\f0 .\cf4 \
\cf2  \cf4 \
\cf2  
\f1 \'c0\'d4\'b7\'c2
\f0  
\f1 \'bf\'b9\'bd\'c3
\f0  -1\cf4 \
\cf2  10\uc0\u8614  
\f1 \'c0\'d4\'b7\'c2
\f0  
\f1 \'bc\'f6\'bf\'ad\'c0\'c7
\f0  
\f1 \'b1\'e6\'c0\'cc
\f0  (N)\cf4 \
\cf2  3 81 9 12 0 \'969 36 33 91 10 \uc0\u8614  
\f1 \'bc\'f6\'bf\'ad
\f0  X\cf4 \
\cf2  5\uc0\u8614  
\f1 \'bc\'f8\'bc\'ad
\f0  
\f1 \'b9\'d9\'b2\'de
\f0  
\f1 \'c1\'a4\'ba\'b8\'c0\'c7
\f0  
\f1 \'b1\'e6\'c0\'cc
\f0 \cf4 \
\cf2  3 8 0 9 3\uc0\u8614  
\f1 \'bc\'f8\'bc\'ad
\f0  
\f1 \'b9\'d9\'b2\'de
\f0  
\f1 \'c1\'a4\'ba\'b8
\f0 \cf4 \
\cf2  \cf4 \
\cf2  
\f1 \'c3\'e2\'b7\'c2
\f0  
\f1 \'bf\'b9\'bd\'c3
\f0  -1\cf4 \
\cf2  \cf4 \
\cf2  \uc0\u9633 91 81 9 10 0 \'969 36 33 12 3 \u8614  
\f1 \'ba\'af\'c8\'af
\f0  
\f1 \'bc\'f6\'bf\'ad
\f0 \cf4 \
\cf2  \cf4 \
\cf2  */\cf4 \
\
\
\cf5 #include \cf6 <stdio.h>\cf4 \
\cf5 #include \cf6 <stdlib.h>\cf4 \
\cf5 #include \cf6 <string.h>\cf4 \
\

\f2\b \cf7 void
\f0\b0 \cf4  \cf8 changeNum\cf4 (
\f2\b \cf7 int
\f0\b0 \cf4 * arr, 
\f2\b \cf7 int
\f0\b0 \cf4 * changeArr, 
\f2\b \cf7 int
\f0\b0 \cf4  len, 
\f2\b \cf7 int
\f0\b0 \cf4  changeLen);\
\

\f2\b \cf7 int
\f0\b0 \cf4  \cf8 main\cf4 () \{\
    
\f2\b \cf7 int
\f0\b0 \cf4  N, N2;\
    
\f2\b \cf7 int
\f0\b0 \cf4 * arr = 
\f2\b \cf7 NULL
\f0\b0 \cf4 ;\
    
\f2\b \cf7 int
\f0\b0 \cf4 * changeArr = 
\f2\b \cf7 NULL
\f0\b0 \cf4 ;\
\
    scanf(\cf6 "%d"\cf4 , &N);\
    arr = (
\f2\b \cf7 int
\f0\b0 \cf4 *)malloc(
\f2\b \cf7 sizeof
\f0\b0 \cf4 (
\f2\b \cf7 int
\f0\b0 \cf4 ) * N);\
    
\f2\b \cf7 if
\f0\b0 \cf4  (arr == 
\f2\b \cf7 NULL
\f0\b0 \cf4 ) \{\
        printf(\cf6 "arr is error!"\cf4 );\
        
\f2\b \cf7 return
\f0\b0 \cf4  -\cf9 1\cf4 ;\
    \}\
    
\f2\b \cf7 for
\f0\b0 \cf4  (
\f2\b \cf7 int
\f0\b0 \cf4  i = \cf9 0\cf4 ; i < N; i++) \{\
        scanf(\cf6 "%d"\cf4 , (arr + i));\
    \}\
\
    scanf(\cf6 "%d"\cf4 , &N2);\
    changeArr = (
\f2\b \cf7 int
\f0\b0 \cf4 *)malloc(
\f2\b \cf7 sizeof
\f0\b0 \cf4 (
\f2\b \cf7 int
\f0\b0 \cf4 ) * N2);\
    
\f2\b \cf7 if
\f0\b0 \cf4  (changeArr == 
\f2\b \cf7 NULL
\f0\b0 \cf4 ) \{\
        printf(\cf6 "changeArr is error!"\cf4 );\
        
\f2\b \cf7 return
\f0\b0 \cf4  -\cf9 1\cf4 ;\
    \}\
\
    
\f2\b \cf7 for
\f0\b0 \cf4  (
\f2\b \cf7 int
\f0\b0 \cf4  i = \cf9 0\cf4 ; i < N2; i++) \{\
        scanf(\cf6 "%d"\cf4 , (changeArr + i));\
    \}\
\
    changeNum(arr, changeArr, N, N2);\
\
    free(changeArr);\
    free(arr);\
    
\f2\b \cf7 return
\f0\b0 \cf4  \cf9 0\cf4 ;\
\}\
\

\f2\b \cf7 void
\f0\b0 \cf4  \cf8 changeNum\cf4 (
\f2\b \cf7 int
\f0\b0 \cf4 * arr, 
\f2\b \cf7 int
\f0\b0 \cf4 * changeArr, 
\f2\b \cf7 int
\f0\b0 \cf4  len, 
\f2\b \cf7 int
\f0\b0 \cf4  changeLen) \{\
    
\f2\b \cf7 int
\f0\b0 \cf4  arr2[len];\
    
\f2\b \cf7 int
\f0\b0 \cf4  start, to;\
\
    
\f2\b \cf7 for
\f0\b0 \cf4  (
\f2\b \cf7 int
\f0\b0 \cf4  i = \cf9 0\cf4 ; i < len; i++)\
        arr2[i] = arr[i];\
\
    
\f2\b \cf7 for
\f0\b0 \cf4  (
\f2\b \cf7 int
\f0\b0 \cf4  i = \cf9 0\cf4 ; i < changeLen - \cf9 1\cf4 ; i++) \{\
        start = changeArr[i];\
        to = changeArr[i + \cf9 1\cf4 ];\
        arr2[to] = arr[start];\
    \}\
    \
    
\f2\b \cf7 for
\f0\b0 \cf4  (
\f2\b \cf7 int
\f0\b0 \cf4  i = \cf9 0\cf4 ; i < len; i++)\
        printf(\cf6 " %d"\cf4 , arr2[i]);\
\
\}\
}
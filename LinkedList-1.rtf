{\rtf1\ansi\ansicpg949\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red253\green143\blue63;\red24\green24\blue28;\red252\green70\blue81;
\red255\green255\blue255;\red242\green36\blue140;\red102\green218\blue255;\red53\green176\blue216;\red255\green231\blue109;
\red255\green231\blue109;}
{\*\expandedcolortbl;;\csgenericrgb\c99216\c56078\c24706;\csgenericrgb\c9472\c9472\c11000;\csgenericrgb\c98824\c27451\c31765;
\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c94752\c13993\c54713;\csgenericrgb\c40000\c85490\c100000;\csgenericrgb\c20784\c69020\c84706;\csgenericrgb\c100000\c90556\c42780;
\csgenericrgb\c100000\c90588\c42745;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab939
\pard\tx939\pardeftab939\pardirnatural\partightenfactor0

\f0\fs38 \cf2 \cb3 #include\cf4 <stdio.h>\cf5 \
\cf2 #include\cf4 <stdlib.h>\cf5 \
\cf2 #include\cf4 <string.h>\cf5 \
\

\f1\b \cf6 typedef
\f0\b0 \cf5  
\f1\b \cf6 struct
\f0\b0 \cf5  \cf7 ListNode\cf5  \{\
    
\f1\b \cf6 char
\f0\b0 \cf5  elem;\
    
\f1\b \cf6 struct
\f0\b0 \cf5  \cf7 ListNode\cf5 *prev;\
    
\f1\b \cf6 struct
\f0\b0 \cf5  \cf7 ListNode\cf5 *next;\
\}listNode;\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf8 print\cf5 (listNode *L);\

\f1\b \cf6 void
\f0\b0 \cf5  \cf8 add\cf5 (listNode *L, 
\f1\b \cf6 int
\f0\b0 \cf5  num, 
\f1\b \cf6 char
\f0\b0 \cf5  x);\

\f1\b \cf6 void
\f0\b0 \cf5  \cf8 get\cf5 (listNode *L, 
\f1\b \cf6 int
\f0\b0 \cf5  num);\

\f1\b \cf6 void
\f0\b0 \cf5  \cf8 delete\cf5 (listNode *L, 
\f1\b \cf6 int
\f0\b0 \cf5  num);\
\
\

\f1\b \cf6 int
\f0\b0 \cf5  \cf8 main\cf5 ()\{\
\
    listNode *H;\
    listNode *T;\
    H = (listNode*)malloc(
\f1\b \cf6 sizeof
\f0\b0 \cf5 (listNode));\
    T = (listNode*)malloc(
\f1\b \cf6 sizeof
\f0\b0 \cf5 (listNode));\
\
    H->next = T;\
    T->prev = H;\
    T->next = 
\f1\b \cf6 NULL
\f0\b0 \cf5 ;\
    H->prev = 
\f1\b \cf6 NULL
\f0\b0 \cf5 ;\
\
    listNode *p;\
\
    p = H;\
\
    
\f1\b \cf6 int
\f0\b0 \cf5  number = \cf9 0\cf5 , i = \cf9 0\cf5 , an = \cf9 0\cf5 ,cnt = \cf9 1\cf5 ;\
    
\f1\b \cf6 char
\f0\b0 \cf5  wh = \cf10 '\\0'\cf5 , pu = \cf10 '\\0'\cf5 ;\
\
\
    scanf(\cf4 "%d"\cf5 , &number);\
\
    
\f1\b \cf6 while
\f0\b0 \cf5  (i != number)\{\
        getchar();\
        scanf(\cf4 "%c"\cf5 , &wh);\
        cnt = \cf9 1\cf5 ;\
        
\f1\b \cf6 if
\f0\b0 \cf5  (wh == \cf10 'A'\cf5 )\{\
            p = H->next;\
            scanf(\cf4 "%d %c"\cf5 , &an,&pu);\
\
            
\f1\b \cf6 while
\f0\b0 \cf5  (p->next != 
\f1\b \cf6 NULL
\f0\b0 \cf5 )\{\
                p = p->next;\
                cnt++;\
            \}\
            
\f1\b \cf6 if
\f0\b0 \cf5  (cnt >= an)\
                add(H, an, pu);\
            
\f1\b \cf6 else
\f0\b0 \cf5 \
                printf(\cf4 "invalid position\\n"\cf5 );\
        \}\
        
\f1\b \cf6 else
\f0\b0 \cf5  
\f1\b \cf6 if
\f0\b0 \cf5  (wh == \cf10 'P'\cf5 )\
            print(H);\
        
\f1\b \cf6 else
\f0\b0 \cf5  
\f1\b \cf6 if
\f0\b0 \cf5  (wh == \cf10 'D'\cf5 )\{\
            scanf(\cf4 "%d"\cf5 , &an);\
            p = H->next;\
            
\f1\b \cf6 while
\f0\b0 \cf5  (p->next != 
\f1\b \cf6 NULL
\f0\b0 \cf5 )\{\
                p = p->next;\
                cnt++;\
            \}\
            
\f1\b \cf6 if
\f0\b0 \cf5  (cnt <=an)\
                printf(\cf4 "invalid position\\n"\cf5 );\
            
\f1\b \cf6 else
\f0\b0 \cf5 \
                delete(H, an);\
        \}\
        
\f1\b \cf6 else
\f0\b0 \cf5 \{\
            scanf(\cf4 "%d"\cf5 , &an);\
            p = H->next;\
            
\f1\b \cf6 while
\f0\b0 \cf5  (p->next != 
\f1\b \cf6 NULL
\f0\b0 \cf5 )\{\
                p = p->next;\
                cnt++;\
            \}\
            
\f1\b \cf6 if
\f0\b0 \cf5  (cnt <= an)\
                printf(\cf4 "invalid position\\n"\cf5 );\
            
\f1\b \cf6 else
\f0\b0 \cf5 \
                get(H, an);\
        \}\
        i++;\
    \}\
\
    
\f1\b \cf6 return
\f0\b0 \cf5  \cf9 0\cf5 ;\
\}\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf8 print\cf5 (listNode *L)\{\
    listNode *p;\
    p = L->next;\
    
\f1\b \cf6 while
\f0\b0 \cf5  (p != 
\f1\b \cf6 NULL
\f0\b0 \cf5 )\{\
        printf(\cf4 "%c"\cf5 , p->elem);\
        p = p->next;\
    \}\
    printf(\cf4 "\\n"\cf5 );\
\}\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf8 add\cf5 (listNode *L, 
\f1\b \cf6 int
\f0\b0 \cf5  num, 
\f1\b \cf6 char
\f0\b0 \cf5  x)\{\
\
    listNode *NewNode, *p, *p2;\
    
\f1\b \cf6 int
\f0\b0 \cf5  i = \cf9 1\cf5 ;\
    NewNode = (listNode*)malloc(
\f1\b \cf6 sizeof
\f0\b0 \cf5 (listNode));\
    NewNode->elem = x;\
    NewNode->prev = 
\f1\b \cf6 NULL
\f0\b0 \cf5 ;\
    NewNode->next = 
\f1\b \cf6 NULL
\f0\b0 \cf5 ;\
\
    p = L;\
    p2 = L->next;\
    
\f1\b \cf6 while
\f0\b0 \cf5  (i != num)\
    \{\
        p = p->next;\
        p2 = p2->next;\
        i++;\
    \}\
\
    NewNode->prev = p;\
    NewNode->next = p2;\
    NewNode->prev->next = NewNode;\
    NewNode->next->prev = NewNode;\
\
\
\}\

\f1\b \cf6 void
\f0\b0 \cf5  \cf8 get\cf5 (listNode *L, 
\f1\b \cf6 int
\f0\b0 \cf5  num)\{\
    listNode *p;\
    
\f1\b \cf6 int
\f0\b0 \cf5  i = \cf9 1\cf5 ;\
    p = L->next;\
    
\f1\b \cf6 while
\f0\b0 \cf5  (i != num)\{\
        p = p->next;\
        i++;\
    \}\
    printf(\cf4 "%c\\n"\cf5 , (p->elem));\
\
\}\

\f1\b \cf6 void
\f0\b0 \cf5  \cf8 delete\cf5 (listNode *L, 
\f1\b \cf6 int
\f0\b0 \cf5  num)\{\
\
    listNode *p;\
    listNode *p2;\
    
\f1\b \cf6 int
\f0\b0 \cf5  i = \cf9 1\cf5 ;\
\
    p = L->next;\
    p2 = L->next->next;\
\
    
\f1\b \cf6 while
\f0\b0 \cf5  (i != num)\{\
        p = p->next;\
        p2 = p2->next;\
        i++;\
    \}\
\
    p2->prev = p->prev;\
    p->prev->next = p2;\
\}\
}